# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:refactoring
dotnet_style_qualification_for_property = false:refactoring
dotnet_style_qualification_for_method = false:refactoring
dotnet_style_qualification_for_event = false:refactoring

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = s_

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# CSharp code style settings:
[*.cs]
# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Prefer "var" when obvious
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:silent

# Mehtod-like construcvts
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Blocks are allowed
csharp_prefer_braces = true:silent
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true



# NOTE: Requires **VS2019 16.3** or later

# StyleCop Rules
# Description: StyleCop.ruleset

# Code files
[*.{cs,vb}]

# Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = none

# If possible, make the underlying type of FileType System.Int32 instead of uint
dotnet_diagnostic.CA1028.severity = none

# Catch more specific exception type
dotnet_diagnostic.CA1031.severity = none

# Add constructor to class
dotnet_diagnostic.CA1032.severity = none

# Do not nest type
dotnet_diagnostic.CA1034.severity = none

# Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = none

# Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = none

# Type is a static holder type but is neither static nor NotInheritable
dotnet_diagnostic.CA1052.severity = none

# Move pinvokes to native methods class
dotnet_diagnostic.CA1060.severity = none

# Validate parameters for externally visible methods
dotnet_diagnostic.CA1062.severity = none

# Modify 'Dispose' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.
dotnet_diagnostic.CA1063.severity = none

# Method creates exception
dotnet_diagnostic.CA1065.severity = none

# Implement IEquatable when overriding Object.Equals
dotnet_diagnostic.CA1066.severity = none

# Passing literal string as parameter
dotnet_diagnostic.CA1303.severity = none

# string.ToUpper behavior could vary based on the current user's locale settings
dotnet_diagnostic.CA1304.severity = none

# String parsing behavior could vary based on the current user's locale settings
dotnet_diagnostic.CA1305.severity = none

# string.EndsWith behavior could vary based on the current user's locale settings
dotnet_diagnostic.CA1307.severity = none

dotnet_diagnostic.CA1401.severity = none

# Use nameof in place of string literal
dotnet_diagnostic.CA1507.severity = none

# Remove underscore for member name
dotnet_diagnostic.CA1707.severity = none

# Do not prefix enum values with the name of the enum type 'FileType'
dotnet_diagnostic.CA1712.severity = none

# Flags enums should have plural names
dotnet_diagnostic.CA1714.severity = none

# Rename virtual/interface member so it no longer conflicts with reserved language
dotnet_diagnostic.CA1716.severity = none

# Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1717.severity = none

# Identifier contains type name
dotnet_diagnostic.CA1720.severity = none

# Naming conflict
dotnet_diagnostic.CA1724.severity = none

# Parameter list of method is never used. Remove the parameter or use it in the method body
dotnet_diagnostic.CA1801.severity = none

# Using method without reference to error
dotnet_diagnostic.CA1806.severity = none

# Remove the explicit static constructor
dotnet_diagnostic.CA1810.severity = none

# internal class never instatiated
dotnet_diagnostic.CA1812.severity = none

# .ctor uses a multidimensional array. Replace it with a jagged array if possible.
dotnet_diagnostic.CA1814.severity = none

# KeyEvent should override method
dotnet_diagnostic.CA1815.severity = none

# Change Dispose() to call GC.SuppressFinalize(object). This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.
dotnet_diagnostic.CA1816.severity = none

# Properties should not return arrays
dotnet_diagnostic.CA1819.severity = none

# Test for empty strings not using Equality check
dotnet_diagnostic.CA1820.severity = none

# Member can be marked as static
# NOTE: Fixing this requires a simultaneous fix in Bizhawk-Vanguard
dotnet_diagnostic.CA1822.severity = none

# Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = none

# Avoid unnecessary zero-length array allocations
dotnet_diagnostic.CA1825.severity = none

# Count() is used where Any() could be used instead to improve performance
dotnet_diagnostic.CA1827.severity = none

# Use the "Count" property instead of Enumerable.Count()
dotnet_diagnostic.CA1829.severity = none

# Call on object before all references to it are out of scope
dotnet_diagnostic.CA2000.severity = none

# Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = none

# Call ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = none

# No tasks without a TaskScheduler
dotnet_diagnostic.CA2008.severity = none

# Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = none

# Re-throwing caught exception changes stack information
dotnet_diagnostic.CA2200.severity = none

# Method passes parameter as the message argument
dotnet_diagnostic.CA2208.severity = none

# Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = none

# Change to be read-only by removing the property setter
dotnet_diagnostic.CA2227.severity = none

# Call a different method
dotnet_diagnostic.CA2234.severity = none

# Add [Serializable] to class
dotnet_diagnostic.CA2237.severity = none

# Unsafe overload of 'Deserialize' method
dotnet_diagnostic.CA3075.severity = none

# Don't use MD5
dotnet_diagnostic.CA5351.severity = none

# Overload is potentially unsafe
dotnet_diagnostic.CA5369.severity = none

# Field never assigned to
dotnet_diagnostic.CS0649.severity = none

# XML comments
dotnet_diagnostic.SA0001.severity = none

# Commas should be followed by whitespace
dotnet_diagnostic.SA1001.severity = none

# Single line comment should begin with a space
dotnet_diagnostic.SA1005.severity = none

# Closing parenthesis should not be preceded by a space
dotnet_diagnostic.SA1009.severity = none

# Code should not contain multiple whitespace characters in a row
dotnet_diagnostic.SA1025.severity = none

# Do not prefix calls with base unless local implementation exists
dotnet_diagnostic.SA1100.severity = none

# Prefix local calls with this
dotnet_diagnostic.SA1101.severity = none

# Code should not contain multiple statements on one line
dotnet_diagnostic.SA1107.severity = none

# Block statements should not contain embedded comments
dotnet_diagnostic.SA1108.severity = none

# Closing parenthesis should be on line of last parameter
dotnet_diagnostic.SA1111.severity = none

# Comma should be on the same line as previous parameter
dotnet_diagnostic.SA1113.severity = none

# Split parameters should start on line after declaration
dotnet_diagnostic.SA1116.severity = none

# Parameters should be on same line or separate lines
dotnet_diagnostic.SA1117.severity = none

# Parameter should not span multiple lines
dotnet_diagnostic.SA1118.severity = none

# Statement should not use unnecessary parenthesis
dotnet_diagnostic.SA1119.severity = none

# Use built-in type alias
dotnet_diagnostic.SA1121.severity = none

# Use string.Empty for empty strings
dotnet_diagnostic.SA1122.severity = none

# Do not use regions
dotnet_diagnostic.SA1124.severity = none

# Generic type constraints should be on their own line
dotnet_diagnostic.SA1127.severity = none

# Put constructor initializers on their own line
dotnet_diagnostic.SA1128.severity = none

# Do not use default value type constructor
dotnet_diagnostic.SA1129.severity = none

# Use lambda syntax
dotnet_diagnostic.SA1130.severity = none

# Constant values should appear on the right-hand side of comparisons
dotnet_diagnostic.SA1131.severity = none

# Do not combine attributes
dotnet_diagnostic.SA1133.severity = none

# Each attribute should be placed on its own line of code
dotnet_diagnostic.SA1134.severity = none

# Enum values should be on separate lines
dotnet_diagnostic.SA1136.severity = none

# Use literal suffix notation instead of casting
dotnet_diagnostic.SA1139.severity = none

# Elements should appear in the correct order
dotnet_diagnostic.SA1201.severity = none

# Elements should be ordered by access
dotnet_diagnostic.SA1202.severity = none

# Constants should appear before fields
dotnet_diagnostic.SA1203.severity = none

# Static elements should appear before instance elements
dotnet_diagnostic.SA1204.severity = none

# Using directives should be ordered alphabetically by the namespaces
dotnet_diagnostic.SA1210.severity = none

# A get accessor appears after a set accessor within a property or indexer
dotnet_diagnostic.SA1212.severity = none

# Readonly fields should appear before non-readonly fields
dotnet_diagnostic.SA1214.severity = none

# Element should begin with an uppercase letter
dotnet_diagnostic.SA1300.severity = none

# Const field names should begin with upper-case letter
dotnet_diagnostic.SA1303.severity = none

# Field should begin with lower-case letter
dotnet_diagnostic.SA1306.severity = none

# Field should begin with upper-case letter
dotnet_diagnostic.SA1307.severity = none

# Field names should not begin with underscore
dotnet_diagnostic.SA1309.severity = none

# Field should not contain an underscore
dotnet_diagnostic.SA1310.severity = none

# Static readonly fields should begin with upper-case letter
dotnet_diagnostic.SA1311.severity = none

# Variable 'Handle' should begin with lower-case letter
dotnet_diagnostic.SA1312.severity = none

# Parameter should begin with lower-case letter
dotnet_diagnostic.SA1313.severity = none

# Type parameter names should begin with T
dotnet_diagnostic.SA1314.severity = none

# Element should declare an access modifier
dotnet_diagnostic.SA1400.severity = none

# Fields should be private
dotnet_diagnostic.SA1401.severity = none

# File may only contain a single type
dotnet_diagnostic.SA1402.severity = none

# Code analysis suppression should have justification
dotnet_diagnostic.SA1404.severity = none

# Debug.Assert should provide message text
dotnet_diagnostic.SA1405.severity = none

# Arithmetic expressions should declare precedence
dotnet_diagnostic.SA1407.severity = none

# Conditional expressions should declare precedence
dotnet_diagnostic.SA1408.severity = none

# Attribute constructor should not use unnecessary parenthesis
dotnet_diagnostic.SA1411.severity = none

# Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1413.severity = none

# Braces for multi-line statements should not share line
dotnet_diagnostic.SA1500.severity = none

# Statement should not be on a single line
dotnet_diagnostic.SA1501.severity = none

# Element should not be on a single line
dotnet_diagnostic.SA1502.severity = none

# Braces should not be omitted
dotnet_diagnostic.SA1503.severity = none

# All accessors should be single-line or multi-line
dotnet_diagnostic.SA1504.severity = none

# Code should not contain multiple blank lines in a row
dotnet_diagnostic.SA1507.severity = none

# Single-line comments should not be followed by blank line
dotnet_diagnostic.SA1512.severity = none

# Closing brace should be followed by blank line
dotnet_diagnostic.SA1513.severity = none

# Single-line comment should be preceded by blank line
dotnet_diagnostic.SA1515.severity = none

# Elements should be separated by blank line
dotnet_diagnostic.SA1516.severity = none

# Braces should not be omitted from multi-line child statement
dotnet_diagnostic.SA1519.severity = none

# Use braces consistently
dotnet_diagnostic.SA1520.severity = none

# Elements should be documented
dotnet_diagnostic.SA1600.severity = none

# Partial elements should be documented
dotnet_diagnostic.SA1601.severity = none

# Enumeration items should be documented
dotnet_diagnostic.SA1602.severity = none

# Element documentation should have summary
dotnet_diagnostic.SA1604.severity = none

# The documentation text within the param tag must not be empty
dotnet_diagnostic.SA1614.severity = none

# File should have header
dotnet_diagnostic.SA1633.severity = none

# File name should match first type name
dotnet_diagnostic.SA1649.severity = none

# The file header should contain a copyright tag.
dotnet_diagnostic.SA1634.severity = none

# The property's documentation summary text should begin with: 'Gets or sets a value indicating whether
dotnet_diagnostic.1623.severity = none


